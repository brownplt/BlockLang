* DONE First, switch to my list implementation. 
* DONE Add in test cases for user-defined functions. 
* DONE Then spend a day on code generation, so that we can have a representative sample of blocks to play with  
- I also have to put an instance of Ray in place on the page, so I can use that, and I have to get the code generation working!
- First, figure out how to generate blocks from calls to builtins. Basically,
  look at type. If Primitive or Closure, match argument spec to determine
  inputs. Otherwise, make an inner field for props. This will work
  nicely with typing. 
* DONE Figure out how I want to represent types. 
- Feel free to have types be associated with arguments.

* Misc
File a bug report, getting cond to use a tabular layout
Make cond default to two clauses, no else

File bug reports about anything that comes up,
- Editing hello, world in the toolbox
- Check target sizes
- Figure out block sizes
- Get type drawers in place
- Put everything that inputs or outputs a string, in one drawer, along with the string constructor
- Separate the forms into a drawer of their own


* DONE Make it possible to copy blocks from main workspace to function definition space
* DONE Make tabs for each function definition
Here's how I am going to do this:

In the workspace_content div, I am going to have a whole bunch of
divs, one for each workspace. They will all be hidden except for the
one which is selected. I will do this by setting all of their classes
to 'hidden_container' except for the one that is ok. I should add a
UI method that does this.

I also then need to have the create a new function definition dialog
make sure I don't crete a function with same name as another function
I have already created, because otherwise I could have two tabs with
the same name. 

I also need to be able to close tabs, and to be able to open new ones
when I create a function definition. I can also have the main tab
look different. 

I need to have a global function registry, which I can edit as I go
along. Maybe!!!

* TODO Make function definitions active back in the main workpace
Ok, so I am creating a module Ray.Shared, and I'm going to share Ray
across all Blockly instances, and I can just put stuff in there to
share it. 
* TODO Add function definition functionality
Ok, so there are a bunch of related pieces. 

I need to be able to share definitions across everything.
Since I'm already attaching an instance to everything, it shouldn't
be that hard to share definitions, I just need to figure out when
exactly I want to update things. 

I can dynamically generate the required flyouts.

Ideally I want to keep a static list of Blocks, and Generators and
share it among everything. To do that, I can just go ahead and not
use code generation infrastructure used by Blockly, and just generate
the data structures myself, that way I don't have to bother with
keeping all the data in sync across frames. I just have to have a
current list of blocks, a currently list of functions, and a
definition for each function. This will make my life so much easier. 

I can handle this code, I shouldn't have to be so afraid of dealing
with this data!

* DONE got generators simplified, now doesn't require eval, just generates structures directly
* TODO More function definition stuff
Right now I am in the process of trying to switch the toolbox
generated to use custom attributes that will then look up the
appropriate values in Ray.Shared, and also I am switching the
creation of the toolbox to use goog.dom, since it is much more
maintainable that way.

I got this done, but now I have to propagate function definitions
across workspaces. 

Make it so that function blocks are associated with their
definitions, and if the number of arguments changes, they change as
well. 

** TODO Order of priorities [6/9]:
- [X] Move defined functions to the shared set of blocks. 
- [X] Separate out argument blocks. 
- [X] Hook up defined function blocks to the definition, so we can change things as needed. 
- [X] Hook up definition expressions to functions so that we have the right semantics. 
- [X] Add a run button, and show output somehow!
- [ ] Make it possible to remove and edit functions (their types)
  once created
Clean up documentation, add some documentation, JSDoc comment
everything complicated. 

- [ ] When you go to tab, flyout should refresh

- [ ] See if I can get mixed layouts

Make sure to email every day with results

Make it so you can't steal function argument blocks from a function
definition and use them elsewhere

- [X] Get function description associated with function usage blocks

Things that I need to fix:

Bottom block gets cut off in layout

TESTS ARE NOW BROKEN, BECAUSE THEY DEPEND ON VARIABLE ARITY
COMPARISONS, and BINOPS. Fix this!

Do I actually pass extra arguments bound to rest arg to the function
body when I have a closure and not just a primitive? I don't think
this is tested anywhere...
