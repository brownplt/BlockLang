* DONE Then spend a day on code generation, so that we can have a representative sample of blocks to play with  
- I also have to put an instance of Ray in place on the page, so I can use that, and I have to get the code generation working!
- First, figure out how to generate blocks from calls to builtins. Basically,
  look at type. If Primitive or Closure, match argument spec to determine
  inputs. Otherwise, make an inner field for props. This will work
  nicely with typing. 
* DONE Figure out how I want to represent types. 
- Feel free to have types be associated with arguments.

* Misc
File a bug report, getting cond to use a tabular layout
Make cond default to two clauses, no else

File bug reports about anything that comes up,
- Editing hello, world in the toolbox
- Check target sizes
- Figure out block sizes
- Get type drawers in place
- Put everything that inputs or outputs a string, in one drawer, along with the string constructor
- Separate the forms into a drawer of their own
* DONE Make it possible to copy blocks from main workspace to function definition space
* DONE Make tabs for each function definition
Here's how I am going to do this:

In the workspace_content div, I am going to have a whole bunch of
divs, one for each workspace. They will all be hidden except for the
one which is selected. I will do this by setting all of their classes
to 'hidden_container' except for the one that is ok. I should add a
UI method that does this.

I also then need to have the create a new function definition dialog
make sure I don't crete a function with same name as another function
I have already created, because otherwise I could have two tabs with
the same name. 

I also need to be able to close tabs, and to be able to open new ones
when I create a function definition. I can also have the main tab
look different. 

I need to have a global function registry, which I can edit as I go
along. Maybe!!!

* TODO Make function definitions active back in the main workpace
Ok, so I am creating a module Ray.Shared, and I'm going to share Ray
across all Blockly instances, and I can just put stuff in there to
share it. 
* TODO Add function definition functionality
Ok, so there are a bunch of related pieces. 

I need to be able to share definitions across everything.
Since I'm already attaching an instance to everything, it shouldn't
be that hard to share definitions, I just need to figure out when
exactly I want to update things. 

I can dynamically generate the required flyouts.

Ideally I want to keep a static list of Blocks, and Generators and
share it among everything. To do that, I can just go ahead and not
use code generation infrastructure used by Blockly, and just generate
the data structures myself, that way I don't have to bother with
keeping all the data in sync across frames. I just have to have a
current list of blocks, a currently list of functions, and a
definition for each function. This will make my life so much easier. 

I can handle this code, I shouldn't have to be so afraid of dealing
with this data!

* DONE got generators simplified, now doesn't require eval, just generates structures directly
* TODO More function definition stuff
Right now I am in the process of trying to switch the toolbox
generated to use custom attributes that will then look up the
appropriate values in Ray.Shared, and also I am switching the
creation of the toolbox to use goog.dom, since it is much more
maintainable that way.

I got this done, but now I have to propagate function definitions
across workspaces. 

Make it so that function blocks are associated with their
definitions, and if the number of arguments changes, they change as
well. 

** TODO Order of priorities [8/10]:
- [X] Move defined functions to the shared set of blocks. 
- [X] Separate out argument blocks. 
- [X] Hook up defined function blocks to the definition, so we can change things as needed. 
- [X] Hook up definition expressions to functions so that we have the right semantics. 
- [X] Add a run button, and show output somehow!
- [X] Make it possible to remove and edit functions (their types)
  once created
Clean up documentation, add some documentation, JSDoc comment
everything complicated. 

- [ ] When you go to tab, flyout should refresh

- [ ] See if I can get mixed layouts

Make sure to email every day with results

Make it so you can't steal function argument blocks from a function
definition and use them elsewhere

- [X] Get function description associated with function usage blocks

Things that I need to fix:

Bottom block gets cut off in layout

- [X] TESTS ARE NOW BROKEN, BECAUSE THEY DEPEND ON VARIABLE ARITY
COMPARISONS, and BINOPS. Fix this!

Do I actually pass extra arguments bound to rest arg to the function
body when I have a closure and not just a primitive? I don't think
this is tested anywhere...

Have unfinished function definitions trigger errors when they are
used during evaluation

If you have partially defined functions, you can still use what you
have defined, and throw an error if you explore unfinished branches

Make constants always available

Think about making it possible to just type in a value in a slot, and
then have it fill in the appropriate literal.

* Non-code things to do *
- Mail the list about increasing drop target size

* Completed Tasks
- [X] Switch from "consumes char" to "consumes", and same for "produces"
  and other types.
- [X] Get the function name to be above the function arguments.
- [X] Re-order blocks to match likely use.
- [X] Put 'and' and 'or' in 'booleans'.
- [X] Make function names black
- [X] Switch '*' for 'Ã—'
- [X] Refactor to have consistent naming conventions!!!
- [X] Fix bug where disposing an expression with sub-expressions
  throws an error during typechecking
- [X] Remove dependency on underscore.js 
- [X] When dragging blocks with rest arguments, the rest arguments
  revert to unknown color, they're fine if I add or remove arguments,
  but initially they do have this problem.
- [X] Show the function signature inside the canvas as well, so that you
  can drag arguments from the signature into the function body.
- [X] Add blocks for test cases 
- [X] Get rid of 'all' drawer
- [X] Add interface element to halt computation
- [X] Fixed bug where char would throw error
- [X] Fixed bug where opening/closing signature Would cause text highlight
- [X] Make it possible to rename function arguments.
- [X] Make it possible to edit function signature, remove a function.
- [X] Figure out how to get the workspace to fit in the available
  space exactly.
- [X] Main vertical scrollbar is broken.
- [X] Fix weird rendering issue with statement blocks.
- [X] For definitions with holes, have a hole icon on the tab for that
  definition to indicate that
  the definition is unfinished.


* Remaining Tasks
** High Priority
- [ ] Double clicking is like using a repl, and is immediate evaluation,
  while running a program is the formal version which triggers tests to
  be run. (Even if you don't use something, all the tests should be run)
- [ ] Have failed tests change color to red upon failure, and
  successful ones to turn green upon success, and then have a tooltip
  that explains what went wrong that is active over the whole area of
  the test block. Have a tab change color as well if there are
  failing tests in the tab.
- [ ] When you change a function and that causes type error, make the
  block that doesn't fit turn red or something, and then also have the
  workspaces which use that block turn red as well
- [ ] Add in image atomic type.
- [ ] Add support for world-programming, via big-bang primitives. 
- [ ] Test adding so many functions that the tab bar is longer than
  the screen width 
- [ ] Get function body displayable in pop-up alongside function usage
- [ ] Make it possible to define a value by right-clicking, saying
  "Name a value" (Not inside functions)
- [ ] Hook up to WeScheme
- [ ] Make failed attempts to connect react more violently to that
  failure. Maybe have block to which you can't connect get repelled!
- [ ] Make drop targets for blocks larger, so that it's easier to connect
  them.
- [ ] Default type of argument should be blank.
- [ ] Test it on iPad
** Low Priority
- [ ] Switch to rounded rectangles. Merge this with notch shape
- [ ] Change unknown color to rainbow gradient.
- [ ] Move the button to open function editing dialog to the signature
- [ ] Make it possible to define a value by right-clicking, saying
  "Name a value" (Inside functions)
- [ ] Make function names unique
- [ ] Every time there is a bug, set it up to send me an email.
- [ ] Inside function definition dialog, you should be able to drag a name
  and type into the signature to add an argument.
- [ ] Use full name of types. num -> number, str -> string, char ->
  character. Make this easy and configurable, so I can change this globally
- [ ] Have flyout automatically refresh when I switch tabs, so that I get
  most up to date set of blocks.
- [ ] Disable copying of argument blocks from one function to
  another. *** Actually just allow, and throw error if you use an
  undefined variable
- [ ] See about having function body not just floating in
  space. (Don't worry about this, just throw an error if they try to
  run and there are multiple expressions that could be the body)
- [ ] Build up support for vertical layouts, and convert 'if' and
  'cond' to use vertical layouts.
- [ ] Remove dependency on jQuery. Not necessarily worth the hassle,
  it's also only used in testing.
- [ ] Start getting compiled mode to work.
- [ ] Fix list block, so that it typechecks correctly (basically, I
  just have to special case this in the typechecker, and provide the
  appropriate constraints).
- [ ] Color toolbar items, according to type.
- [ ] Figure out why drawers get confused sometimes. 
- [ ] Rename 'unknown' to 'misc'. 
- [ ] In funtion creation dialog, arguments names should be colored
  according to their type. Same with function name. 
- [ ] Ordering for evaluation of multiple expressions in main workspace.
- [ ] Figure out how to handle unfinished function definitions
- [ ] X to remove argument
- [ ] Make pasting happen at cursor, not just at location of copy
- [ ] Use DragLists to handle re-ordering arguments
- [ ] Put 'example' block in forms
- [ ] Figure out interface for removing/changing values
- [ ] Require at least one argument for functions
- [ ] Make purpose statement area much larger (input -> textarea)
- [ ] Have individual items in the function definition dialog turn green when valid, 
  and red otherwise, with localized error messages
* Immediate items to bring up with Emmanuel
- How to evaluate expression inside function body? Should we make
  students provide values for the arguments, or just disallow this?

I guess that maybe the scrollbar isn't broken, because it simply
won't let me make the canvas larger than it already was.

Put examples in 'forms'

You could have definitions that have holes, be indicated with a hole
icon that would make it clear that you have to finish filling it in.


Get function definition interface nailed down.

** Alpha renaming, testing, editing arguments and function types ** 


Pre populate example block with function on left, and fill in the
color for the hole on the right

Also have the run button run the tests in a function's workspace when
you have the function workspace visible.

Set up halt button, test button!!!!!!

Because the flyout and signature create new blocks by going through
XML (block->xml->block), I need to have all the prototype names
registered and available for lookup.

Ok, in order to register tab with the Blockly, I need to wait until
the Blockly is registered with Ray.Shared, so I need to move all the
tab creation stuff to inside fun-def-blockly.html or something like
that. This is way more involved than I thought it would
be. Basically the problem is setting everything up to communicate
correctly.

I can't get rid of block.value_ since it is used by the generators,
but I should probably do a more fine-grained dispatch on block type,
and generate according to that. Oops, it also is used by the
block-typechecker as well. 

* Blocks have an outputType field in two different places.
1. a this.outputType_ field, which is used to set the
   outputConnection's output type,
2. Which is the 2nd type. this.outputConnection.outputType_

I'm going to simplify this by removing the block outputType field,
and renaming it colourType, and just using for blocks that don't have
an output connection, to determine their colour.

Ok, so I'm working on getting the removed functions to actually be
removed everywhere, which requires removing the block from
Ray.Shared.savedBlocks_, and Ray.Shared.blockDirectory_. However,
doing this is kind of annoying and I don't really don't want to
figure out how to get this working. I propose simplifying the
implementation of Ray.Shared.flyoutCategory to dynamically create the
blockDir from Ray.Shared.savedBlocks_, and then just use that.

Problem is in renderDrawLeft_
