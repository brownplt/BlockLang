* Whalesong
** Dependencies

   As checked out originally, the blockly core is provided in compiled
   form ('blockly_compressed.js') so that users who don't want to
   change the core functionality of Blockly don't have to get a local
   copy of the Google Closure library (upon which Blockly depends)
   and can just can add languages and blocks using the high-level
   functions provided by the Blockly core. 

   If you do want to recompile the core, you then need the Closure
   Library dependency, located at '/closure-library'. This
   contains all the UI shared by all of Google's web applications, as
   well as some dependency management for organizing the codebase and
   Google's events library. 

   By default, even if you have the local copy of the Closure Library,
   compilation is still done through the Closure Compiler web API,
   since the Closure Library and the Closure Compiler have to be
   installed separately. I've modified the provided build script
   ('build.py') to do everything locally since online compilation
   wouldn't work without an internet connection and is quite
   slow, as the entire contents of files to be compiled are sent over
   as parameters to the POST request.  

** Interfacing with Whalesong runtime

   The Whalesong runtime provides Javascript versions of (essentially)
   all of the core of Racket, and acts as a virtual machine on top of
   the Javascript runtime, allowing programs it runs to interrupt and
   resume computations, both of which are needed to implement
   continuations and other forms of exceptional control flow. 

   It normally operates by compiling Racket code to Racket bytecode,
   then compiling that bytecode to an intermediate language, and then
   finally to Javascript bytecode which then runs on the Whalesong VM. 

   We want to be able to evaluate arbitrary block programs (corresponding
   to Racket programs) every time a user hits run, without having
   to generate Racket, send that to a server which returns compiled
   Whalesong VM JS, and then finally that. 

   The Whalesong runtime provides the function 'asJavaScriptFunction'
   (located in 'plt.baselib.functions') which takes in a Whalesong
   function, and returns a function that can be called directly from
   ordinary Javascript code, though in a less-than-straightforward
   way. 

   The collection of Racket primitives provided by the Whalesong
   runtime is located at 'plt.baselib.primitives.Primitives'. 

   Here's an example: We have the following expression that we want to
   evaluate: (sin (+ 1 2))

   We can get the javascript functions corresponding to each of the
   primitives as follows: 

   #+BEGIN_SRC js
     
     var sin_prim = plt.baselib.primitives.Primitives['sin'];
     var plus_prim = plt.baselib.primitives.Primitives['+'];
     
     var sinF = plt.baselib.functions.asJavaScriptFunction(sin_prim);
     var plusF = plt.baselib.functions.asJavaScriptFunction(plus_prim);
     
   #+END_SRC

   The calling convention for functions created in this way has them
   taking 2 or more arguments, 
     success: a function of one argument that is executed upon
              successful evaluation of the underlying Racket function
              application. When evaluated, the success function is
              passed the result of the Racket function
              call. (Basically the successful continuation.)
     failure: a function of one argument that is executed upon an
              error or exeception during the evaluation of the
              underlying Racket function application. When evaluated,
              the failure function is passed the error produced by the
              Racket function application. (Basically the failure
              continuation.) 
     args...: Any arguments to the Racket function that is being
              wrapped here. These should be objects of the right type
              that are passed directly to the called function. 

   Furthermore, when the success and failure continuations are called,
   any values they return are not passed back directly to the top
   level that invoked the Racket primitive in the first place. In
   order to get the value resulting from the function invocation and to
   make the generated code more manageable, I define the following
   functions globally, immediately after the Whalesong runtime
   finished loading:

   #+BEGIN_SRC js
     
     var _temp;
     var success = function(v) { _temp = v; };
     var failure = function(e) { 
         throw { message: "Failure!!!", value: v }; 
     };
     var prim_to_js_prim = function(name) { 
         return plt.baselib.functions.asJavaScriptFunction(plt.baselib.primitives.Primitives[name]);
     };
     var call_js_prim = function(prim) { 
         var args = Array.prototype.slice.call(arguments, 1);
         var continuations = [success, failure];
         prim.apply(null, continuations.concat(args));
         return _temp;
     };

   #+END_SRC

   With this in place, The generated code can be relatively
   straightforward. Continuing with the example above, the final
   generated code is:

   #+BEGIN_SRC js

     call_js_prim(prim_to_js_prim('sin'), call_js_prim(prim_to_js_prim('+'), 1, 2));

   #+END_SRC

   This evaluates to 0.1411, which matches exactly the result obtained
   by (sin (+ 1 2)) in WeScheme. 

   I believe this pattern will suffice most (if not all) of the blocks
   that don't extend the namespace (that aren't definitions). Those will
   require deeper integration with the Whalesong VM than here since I
   will have to deal with scope and variable binding and have to be
   very careful about when exactly definitions are introduced into the
   environment.   
   
   That being said, using this pattern (potentially) loses a lot of the
   functionality of the Whalesong VM, since we are working in plain
   Javascript and not bytecode compiled JS. I'm not sure whether this
   approach allows for computations to be interrupted, and I suppose
   that depends at least in part on how the 'asJavaScriptFunction'
   function wraps up the function it is converting to JS.

** Update this to include documentation on ws_apply
** Fix bug in Whalesong error message where 'max' will report errors as 'min'
** Send messages to Blockly mailing list
- Can we define our own shapes, (rounded rectangle)
- Why is there a gap between sub-expression and containing expression, since it can be full

** Make a prototype of some programs that have definitions so that we can see what we are expecting

** So I've now defined a lot of the builtins in Math, Lists, Text. 
- I can do Colour and Logic pretty easily, but then I get stuck when it comes to 
*** The following: 
- Variables
- Procedures
- Control

** How can I get 'if' working without being able to compile the expression into Racket bytecode and then to Javascript bytecode. 
*** Perhaps I can define the library version of 'if', and similarly for other primitive forms, and then just use those. But maybe that won't work.

** Currently, when I save envs in a Closure, those saved envs, are not
* Ray
Ray is the (Racketish) evaluator I wrote, which is the current
backend to the Block language. It now uses the same build system and
dependencies management system as Blockly, which allows it to be
smoothly integrated with Blockly. 

Currently when I run the demo application, I create a new evaluator,
initialize the library of builtins, and then generate blocks for each
builtin, and create a toolbox from the blocks I've generated with all
the colours in place. 

* What is required to get function definitions working?
I need to be able to create a new workspace, with ideally the same
toolbox as the current one with the addition of the procedure I am
defining, and I need to be able fluidly switch from one workspace to
the next. 

This is more difficult than it would seem, because simply creating a
new workspace is not easy to do. I suppose I could add a button
'define function' which would then open up a dialog which would
prompt me for name, description, arguments, blah, blah, which I could
then use to initialise a new instance of Blockly in a new
workspace. When I was done editing that, I could have a button to
return to the original page. 

A lot of this depends on whether or not we want to try and make the
new workspace directly on top of the old one, or whether we want to
create a new workspace entirely. If we want to create a new one on
top of an old one, a fair amount more work is required, and I'm not
immediately sure how to make sure I can drag from the original
toolbox onto the correct workspace. Also, where and how do I put the
new function block? Should I just put it in the appropriate category,
or should I make it extra obvious that it and the thing I am defining
are one and the same by highlighting it or something?

* Difficulties I've been having

Hi, 

I've been running into a lot of difficulties getting a separate
blockly function definition canvas working, and I wanted to write
what exactly the problems are in the hopes that someone will be able
to help me figure out how to get past them. 

As Blockly is currently designed, multiple instances cannot coexist
on the same HTML page. This is because Blockly uses a global variable
'Blockly' and partitions that into namespaces, ('Blockly.Blocks',
'Blockly.Field', 'Blockly.Workspace', ...) which all refer to each
other. Dependency management is handled by Google's closure library's
'goog.require' and 'goog.provide' functions. Each file begins with a
call to goog.provide indicating which namespace/s it provides, and
then a series of calls to 'goog.require', indicating what it requires
to be loaded in order for it to be executed. To run an app using this
system, you can either compile it into a single minified monolithic
javascript file, or generate another file (using a python script
bundled with the closure library) which keeps track of which
file each namespace can be found in, and which namespaces that file
requires. Then, when runnning your application, you load 'base.js' in the
closure-library (which sets up 'goog', 'goog.provide','goog.require')
and the dependencies file you generated. Then any subsequent calls to
'goog.require' will cause the required namespace's dependencies to be
loaded in an order based on a topological sort of the requirements
graph.

In order for this all to work, 'Blockly' must be in the global
namespace throughout the whole process, and each namespace loaded
must then be a sub-namespace of 'Blockly'. 

As a consequence, it is not possible to run two instances of Blockly
in the same document. In order to get around this limitation, the
Blockly wiki suggest that you load Blockly into the document body of
an iframe in your main page, and if you need another instance create
another iframe with Blockly inside. 

* DONE Then spend a day on code generation, so that we can have a representative sample of blocks to play with  
- I also have to put an instance of Ray in place on the page, so I can use that, and I have to get the code generation working!
- First, figure out how to generate blocks from calls to builtins. Basically,
  look at type. If Primitive or Closure, match argument spec to determine
  inputs. Otherwise, make an inner field for props. This will work
  nicely with typing. 
* DONE Figure out how I want to represent types. 
- Feel free to have types be associated with arguments.

* Misc
File a bug report, getting cond to use a tabular layout
Make cond default to two clauses, no else

File bug reports about anything that comes up,
- Editing hello, world in the toolbox
- Check target sizes
- Figure out block sizes
- Get type drawers in place
- Put everything that inputs or outputs a string, in one drawer, along with the string constructor
- Separate the forms into a drawer of their own
* DONE Make it possible to copy blocks from main workspace to function definition space
* DONE Make tabs for each function definition
Here's how I am going to do this:

In the workspace_content div, I am going to have a whole bunch of
divs, one for each workspace. They will all be hidden except for the
one which is selected. I will do this by setting all of their classes
to 'hidden_container' except for the one that is ok. I should add a
UI method that does this.

I also then need to have the create a new function definition dialog
make sure I don't crete a function with same name as another function
I have already created, because otherwise I could have two tabs with
the same name. 

I also need to be able to close tabs, and to be able to open new ones
when I create a function definition. I can also have the main tab
look different. 

I need to have a global function registry, which I can edit as I go
along. Maybe!!!

* TODO Make function definitions active back in the main workpace
Ok, so I am creating a module Ray.Shared, and I'm going to share Ray
across all Blockly instances, and I can just put stuff in there to
share it. 
* TODO Add function definition functionality
Ok, so there are a bunch of related pieces. 

I need to be able to share definitions across everything.
Since I'm already attaching an instance to everything, it shouldn't
be that hard to share definitions, I just need to figure out when
exactly I want to update things. 

I can dynamically generate the required flyouts.

Ideally I want to keep a static list of Blocks, and Generators and
share it among everything. To do that, I can just go ahead and not
use code generation infrastructure used by Blockly, and just generate
the data structures myself, that way I don't have to bother with
keeping all the data in sync across frames. I just have to have a
current list of blocks, a currently list of functions, and a
definition for each function. This will make my life so much easier. 

I can handle this code, I shouldn't have to be so afraid of dealing
with this data!

* DONE got generators simplified, now doesn't require eval, just generates structures directly
* TODO More function definition stuff
Right now I am in the process of trying to switch the toolbox
generated to use custom attributes that will then look up the
appropriate values in Ray.Shared, and also I am switching the
creation of the toolbox to use goog.dom, since it is much more
maintainable that way.

I got this done, but now I have to propagate function definitions
across workspaces. 

Make it so that function blocks are associated with their
definitions, and if the number of arguments changes, they change as
well. 

** TODO Order of priorities [8/10]:
- [X] Move defined functions to the shared set of blocks. 
- [X] Separate out argument blocks. 
- [X] Hook up defined function blocks to the definition, so we can change things as needed. 
- [X] Hook up definition expressions to functions so that we have the right semantics. 
- [X] Add a run button, and show output somehow!
- [X] Make it possible to remove and edit functions (their types)
  once created
Clean up documentation, add some documentation, JSDoc comment
everything complicated. 

- [ ] When you go to tab, flyout should refresh

- [ ] See if I can get mixed layouts

Make sure to email every day with results

Make it so you can't steal function argument blocks from a function
definition and use them elsewhere

- [X] Get function description associated with function usage blocks

Things that I need to fix:

Bottom block gets cut off in layout

- [X] TESTS ARE NOW BROKEN, BECAUSE THEY DEPEND ON VARIABLE ARITY
COMPARISONS, and BINOPS. Fix this!

Do I actually pass extra arguments bound to rest arg to the function
body when I have a closure and not just a primitive? I don't think
this is tested anywhere...

Have unfinished function definitions trigger errors when they are
used during evaluation

If you have partially defined functions, you can still use what you
have defined, and throw an error if you explore unfinished branches

Make constants always available

Think about making it possible to just type in a value in a slot, and
then have it fill in the appropriate literal.

* Non-code things to do *
- Mail the list about increasing drop target size

** Alpha renaming, testing, editing arguments and function types ** 

Pre populate example block with function on left, and fill in the
color for the hole on the right

Also have the run button run the tests in a function's workspace when
you have the function workspace visible.

Set up halt button, test button!!!!!!

Because the flyout and signature create new blocks by going through
XML (block->xml->block), I need to have all the prototype names
registered and available for lookup.

Ok, in order to register tab with the Blockly, I need to wait until
the Blockly is registered with Ray.Shared, so I need to move all the
tab creation stuff to inside fun-def-blockly.html or something like
that. This is way more involved than I thought it would
be. Basically the problem is setting everything up to communicate
correctly.

I can't get rid of block.value_ since it is used by the generators,
but I should probably do a more fine-grained dispatch on block type,
and generate according to that. Oops, it also is used by the
block-typechecker as well. 


* Blocks have an outputType field in two different places.
1. a this.outputType_ field, which is used to set the
   outputConnection's output type,
2. Which is the 2nd type. this.outputConnection.outputType_

I'm going to simplify this by removing the block outputType field,
and renaming it colourType, and just using for blocks that don't have
an output connection, to determine their colour.

Ok, so I'm working on getting the removed functions to actually be
removed everywhere, which requires removing the block from
Ray.Shared.savedBlocks_, and Ray.Shared.blockDirectory_. However,
doing this is kind of annoying and I don't really don't want to
figure out how to get this working. I propose simplifying the
implementation of Ray.Shared.flyoutCategory to dynamically create the
blockDir from Ray.Shared.savedBlocks_, and then just use that.

Problem is in renderDrawLeft_

* Reason I'm having trouble figuring out how to do correct handling of unfinished function definitions. 
It requires lazy evaluation, which is entirely different from what I have currently!

I think I can pretty closely follow the model presented in PLAI/2e [[http://cs.brown.edu/courses/cs173/2012/book/Alternate_Application_Semantics.html#(part._.Lazy_.Application)][here]]

* First thing to get going:
** Get the compiled mode evaluation going
*** Every function should have a finished definition, and all the test cases should be run.
This is now working, I believe.

Next order of business: 
- [X] Get tooltips for the widgets on the tabs.
- [X] Get tabs to change color depending on test success/failure.
- [X] Get test blocks to change color as well.

How should I handle trying to compile while there are unfinished definitions. 
At which point should I abandon ship, and stop?
Where in the interface should I provide this information

* More stuff
- [X] Have the evaluation button text change depending on whether the current tab is the main workspace or a function definition
- [X] Why don't I have Ray.UI keep track of all the UI elements it needs.
- [X] Wait wait wait, I still want to subclass the run button!!!

I might want to eventually switch to something more structured for adding methods to blocks. 

So instead of just having these prototypes, and constantly copying functions and data over, I could actually have a class hierarchy.

Ok, so I can have the example blocks change color appropriately. 

What I now need to do is have them return to their original colors upon having either of their slots changed, or having their function definition changed. 

I think the best way of doing this is to have blocks dispatch events when a slot is added or removed. 
Also, when a connection is made, we should set up parent EventTargets to be the containing block.

Also, each block should have an event handler of it's own. (Which we have to initialize and dispose of properly!)

So what I have the example block do is listen with its own event handler for a BLOCK_ADDED or BLOCK_REMOVED event, and react accordingly.

The events should propagate up to the example block, which can then handle everything.

As for changing things when I change the function involved, I want to have the example block reset when:

* The body block at the time of evaluation dispatches a BLOCK_ADDED or BLOCK_REMOVED event.
* The body block at the time of evaluation is replaced with something else. 
I was thinking this could be implemented by keeping track of what the current body block is at the time of evaluation, 
and the next time that there is exactly one block of the right type (so we have an unambiguous body) we make sure it is the same one (compare uids).

Since we're still listening for changes on the original one while we're doing this, we don't have to worry that we are distracted by the temporary additional blocks, and will miss a change.
This will work, since either the body is switched, in which case we should reset the example block, or the body is changed, in which case we should as well. 

This makes sense. Also, we are going to treat it as a change to pull a block out and then immediately replace it. That's debatable, but pretty reasonable.

That's it for tonight. Goodnight!

* --------------------------------------------------

Have condition to reset be anything changing in the original function body block.

Also, disable run button so long as there is an invalid function definition. (Have a tooltip directing people to the icon which indicates exactly which errors they need to fix)

Check and run

* --------------------------------------------------

I can get rid of the stupid Ray.UI.FunTab.FunTab repetition. For proof, look at Blockly.Block! (Also, RunButton.RunButton!)

Problem I just realized existed: If I want to disable the run button, when I have an invalid function definition, I need to have that happen pretty much immediately.
Otherwise, someone could potentially activate it from an invalid state and break things. I could probably avoid this by setting the interval to be very very very small, 
but then I'm wasting a bunch of cycles on polling, when I could just fire the appropriate events and be done with it.

How do I know when the workspace has a valid function definition?

Ok, here is the solution I'm going to use: I will listen for workspaceChangedEvents, and I will also listen for events on the block that was the body block at the time of running the test.

The polling problem does not exist for resetting example blocks, but I haven't solved it for updating status icons.

If I get a SUBBLOCK_REMOVED or SUBBLOCK_ADDED or PARENT_BLOCK_CHANGED or BLOCK_DISPOSED event, I can reset.
Wait, doesn't this cover all the cases, so that I don't even have to listen to the workspaceChangedEvents, since the original block alone can tell me everything I need to know?

_If the original function body block hasn't fired an event, there is no way that the function definition has changed. Yay, that makes it super simple!_

One other case I need to handle is the case where I add 2 or 3 blocks to the workspace, but I then remove the original one. 
Presumably, its PARENT_BLOCK_CHANGED event won't fire, because its parent was null and still is null.
Thus, what I need is yet another event BLOCK_DISPOSED that gets called during disposal,
 but before the EventTarget dispose is called, since at that point I will have already gotten rid of the EventTarget stuff. 
I can solve this just by moving the EventTarget disposal to the end, and only dispatching the event then.



Also, I need to make sure that PARENT_BLOCK_CHANGED events are dispatched only when the block in question doesn't have a parent, 
so that it doesn't bubble up. So I can just have that happen in setParent, after I've disconnected the old, and before I've connected the new.

* Notes about changing type names 8/21/13

Well, I've succeeded in doing it. It wasn't that hard, just involved pulling some constants out.
